
import Web3 from 'web3';

console.log("success!");

let web3 = new Web3("https://optimism-mainnet.infura.io/v3/68f97f051e674f5a8ff25a1169f0682e");

// testDecodeInput();
// testDecodeInput2();
// decodeInput();

decodeOpenSeaInput();

function decodeOpenSeaInput(){
    let ABI = [
        {
            "components": [
                {
                    "components": [
                        {
                            "internalType": "address",
                            "name": "offerer",
                            "type": "address"
                        },
                        {
                            "internalType": "address",
                            "name": "zone",
                            "type": "address"
                        },
                        {
                            "components": [
                                {
                                    "internalType": "enum ItemType",
                                    "name": "itemType",
                                    "type": "uint8"
                                },
                                {
                                    "internalType": "address",
                                    "name": "token",
                                    "type": "address"
                                },
                                {
                                    "internalType": "uint256",
                                    "name": "identifierOrCriteria",
                                    "type": "uint256"
                                },
                                {
                                    "internalType": "uint256",
                                    "name": "startAmount",
                                    "type": "uint256"
                                },
                                {
                                    "internalType": "uint256",
                                    "name": "endAmount",
                                    "type": "uint256"
                                }
                            ],
                            "internalType": "struct OfferItem[]",
                            "name": "offer",
                            "type": "tuple[]"
                        },
                        {
                            "components": [
                                {
                                    "internalType": "enum ItemType",
                                    "name": "itemType",
                                    "type": "uint8"
                                },
                                {
                                    "internalType": "address",
                                    "name": "token",
                                    "type": "address"
                                },
                                {
                                    "internalType": "uint256",
                                    "name": "identifierOrCriteria",
                                    "type": "uint256"
                                },
                                {
                                    "internalType": "uint256",
                                    "name": "startAmount",
                                    "type": "uint256"
                                },
                                {
                                    "internalType": "uint256",
                                    "name": "endAmount",
                                    "type": "uint256"
                                },
                                {
                                    "internalType": "address payable",
                                    "name": "recipient",
                                    "type": "address"
                                }
                            ],
                            "internalType": "struct ConsiderationItem[]",
                            "name": "consideration",
                            "type": "tuple[]"
                        },
                        {
                            "internalType": "enum OrderType",
                            "name": "orderType",
                            "type": "uint8"
                        },
                        {
                            "internalType": "uint256",
                            "name": "startTime",
                            "type": "uint256"
                        },
                        {
                            "internalType": "uint256",
                            "name": "endTime",
                            "type": "uint256"
                        },
                        {
                            "internalType": "bytes32",
                            "name": "zoneHash",
                            "type": "bytes32"
                        },
                        {
                            "internalType": "uint256",
                            "name": "salt",
                            "type": "uint256"
                        },
                        {
                            "internalType": "bytes32",
                            "name": "conduitKey",
                            "type": "bytes32"
                        },
                        {
                            "internalType": "uint256",
                            "name": "totalOriginalConsiderationItems",
                            "type": "uint256"
                        }
                    ],
                    "internalType": "struct OrderParameters",
                    "name": "parameters",
                    "type": "tuple"
                },
                {
                    "internalType": "uint120",
                    "name": "numerator",
                    "type": "uint120"
                },
                {
                    "internalType": "uint120",
                    "name": "denominator",
                    "type": "uint120"
                },
                {
                    "internalType": "bytes",
                    "name": "signature",
                    "type": "bytes"
                },
                {
                    "internalType": "bytes",
                    "name": "extraData",
                    "type": "bytes"
                }
            ],
            "internalType": "struct AdvancedOrder[]",
            "name": "",
            "type": "tuple[]"
        },
        {
            "components": [
                {
                    "internalType": "uint256",
                    "name": "orderIndex",
                    "type": "uint256"
                },
                {
                    "internalType": "enum Side",
                    "name": "side",
                    "type": "uint8"
                },
                {
                    "internalType": "uint256",
                    "name": "index",
                    "type": "uint256"
                },
                {
                    "internalType": "uint256",
                    "name": "identifier",
                    "type": "uint256"
                },
                {
                    "internalType": "bytes32[]",
                    "name": "criteriaProof",
                    "type": "bytes32[]"
                }
            ],
            "internalType": "struct CriteriaResolver[]",
            "name": "",
            "type": "tuple[]"
        },
        {
            "components": [
                {
                    "internalType": "uint256",
                    "name": "orderIndex",
                    "type": "uint256"
                },
                {
                    "internalType": "uint256",
                    "name": "itemIndex",
                    "type": "uint256"
                }
            ],
            "internalType": "struct FulfillmentComponent[][]",
            "name": "",
            "type": "tuple[][]"
        },
        {
            "components": [
                {
                    "internalType": "uint256",
                    "name": "orderIndex",
                    "type": "uint256"
                },
                {
                    "internalType": "uint256",
                    "name": "itemIndex",
                    "type": "uint256"
                }
            ],
            "internalType": "struct FulfillmentComponent[][]",
            "name": "",
            "type": "tuple[][]"
        },
        {
            "internalType": "bytes32",
            "name": "fulfillerConduitKey",
            "type": "bytes32"
        },
        {
            "internalType": "address",
            "name": "recipient",
            "type": "address"
        },
        {
            "internalType": "uint256",
            "name": "maximumFulfilled",
            "type": "uint256"
        }
    ];

    // let ABI = JSON.parse(ABIStr);

    let inputData = "0x00000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000c800000000000000000000000000000000000000000000000000000000000000ca00000000000000000000000000000000000000000000000000000000000000dc00000007b02230091a7ed01230072f7006a004d60a8d4e71d599b8104250f00000000000000000000000000001ad7c9934acffff81903f8bd305eb02f9ef37f1a00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000005e000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000520000000000000000000000000000000000000000000000000000000000000058000000000000000000000000095c4b319d3898116bf15bc75252a04ae77c0acaa000000000000000000000000004c00500000ad104d7dbd00e3ae0a5c00560c00000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000002200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000006504fe2500000000000000000000000000000000000000000000000000000000652b589b0000000000000000000000000000000000000000000000000000000000000000360c6ebe0000000000000000000000000000000000000000ce52128f1ea1334c0000007b02230091a7ed01230072f7006a004d60a8d4e71d599b8104250f00000000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000030000000000000000000000008ac865b70a212af1825bdff9f0561a26a2a94b378000000000000000000000000000004f0000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d99a8cec7e200000000000000000000000000000000000000000000000000000d99a8cec7e200000000000000000000000000095c4b319d3898116bf15bc75252a04ae77c0acaa0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006379da05b60000000000000000000000000000000000000000000000000000006379da05b60000000000000000000000000000000a26b00c1f0df003000390027140000faa7190000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000018de76816d80000000000000000000000000000000000000000000000000000018de76816d800000000000000000000000000017a6479538fb714de41f13e8bf7dfe6b12ae55810000000000000000000000000000000000000000000000000000000000000040266ed8fc1f86159566a974190e4ad4be4139052adff35bd6a97b968504b4565f503f9cc62e82b7f8f9539f9c11edc439aa2d21f65946012439de6d9f5ec67c06000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000052000000000000000000000000000000000000000000000000000000000000005800000000000000000000000007f9b32db40715f91a573891459f38d4dc38a4fd7000000000000000000000000004c00500000ad104d7dbd00e3ae0a5c00560c00000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000002200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000006504f1e000000000000000000000000000000000000000000000000000000000652c7ee00000000000000000000000000000000000000000000000000000000000000000360c6ebe00000000000000000000000000000000000000009fd5e596da3266c60000007b02230091a7ed01230072f7006a004d60a8d4e71d599b8104250f00000000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000030000000000000000000000008ac865b70a212af1825bdff9f0561a26a2a94bfdc4efdc00000000000000000000000000000000000000000000000000001051fdc4efdc0000000000000000000000000007f9b32db40715f91a573891459f38d4dc38a4fd7000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000775f05a074000000000000000000000000000000000000000000000000000000775f05a0740000000000000000000000000000000a26b00c1f0df003000390027140000faa719000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001dd7c1681d0000000000000000000000000000000000000000000000000000001dd7c1681d000000000000000000000000000017a6479538fb714de41f13e8bf7dfe6b12ae55810000000000000000000000000000000000000000000000000000000000000040a4e56ac23a9328ce3598a7990d762b611a7197b3a6475accb50f1696d25d6b686377ea7467f35be879584ef43833743b71a911f7a454746bb3380034836a7c3e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000aeed549c1f360c6ebe";

    let decodedSecret = web3.eth.abi.decodeParameters(ABI, inputData);

    console.log(decodedSecret);

    let orderArray: any = decodedSecret['0'];
    for(let i = 0; i < orderArray.length; i++){
        let order = orderArray[i];
        console.log(order.signature);
    }

    let fulfillmentComponent2D:any = decodedSecret['2'];
    for(let i = 0; i < fulfillmentComponent2D.length; i++){
        let fulfillmentComponentArray:any = fulfillmentComponent2D[i];
        for(let j = 0; j < fulfillmentComponentArray.length; j++){
            console.log(fulfillmentComponentArray[j]['0']);
            console.log(fulfillmentComponentArray[j]['1']);
        }
    }

    console.log("=============================");

    let fulfillmentComponent2D3:any = decodedSecret['3'];
    for(let i = 0; i < fulfillmentComponent2D3.length; i++){
        let fulfillmentComponentArray:any = fulfillmentComponent2D3[i];
        for(let j = 0; j < fulfillmentComponentArray.length; j++){
            console.log(fulfillmentComponentArray[j]['0']);
            console.log(fulfillmentComponentArray[j]['1']);
        }
    }
}
